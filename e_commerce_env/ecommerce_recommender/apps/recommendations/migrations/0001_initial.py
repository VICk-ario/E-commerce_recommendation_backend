# Generated by Django 5.2.7 on 2025-10-28 18:56

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('products', '0001_initial'),
        ('stores', '0001_initial'),
        ('users', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Recommendation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session_id', models.CharField(blank=True, max_length=255)),
                ('algorithm', models.CharField(choices=[('collaborative_filtering', 'Collaborative Filtering'), ('content_based', 'Content-Based'), ('hybrid', 'Hybrid'), ('popularity', 'Popularity-Based'), ('session_based', 'Session-Based'), ('trending', 'Trending'), ('frequently_bought_together', 'Frequently Bought Together'), ('similar_users', 'Similar Users')], max_length=50)),
                ('score', models.FloatField()),
                ('rank', models.IntegerField()),
                ('context', models.JSONField(default=dict)),
                ('explanation', models.TextField(blank=True)),
                ('shown_count', models.IntegerField(default=0)),
                ('click_count', models.IntegerField(default=0)),
                ('purchase_count', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField(blank=True, null=True)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recommended_in', to='products.product')),
                ('store', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recommendations', to='stores.store')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='recommendations', to='users.user')),
            ],
            options={
                'db_table': 'recommendations',
                'ordering': ['-score', 'rank'],
            },
        ),
        migrations.CreateModel(
            name='RecommendationConfig',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('algorithm', models.CharField(choices=[('collaborative_filtering', 'Collaborative Filtering'), ('content_based', 'Content-Based'), ('hybrid', 'Hybrid'), ('popularity', 'Popularity-Based'), ('session_based', 'Session-Based'), ('trending', 'Trending'), ('frequently_bought_together', 'Frequently Bought Together'), ('similar_users', 'Similar Users')], max_length=50)),
                ('config', models.JSONField(default=dict)),
                ('is_active', models.BooleanField(default=True)),
                ('weight', models.FloatField(default=1.0)),
                ('filters', models.JSONField(default=dict)),
                ('max_recommendations', models.IntegerField(default=10)),
                ('store', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recommendation_configs', to='stores.store')),
            ],
            options={
                'db_table': 'recommendation_configs',
            },
        ),
        migrations.CreateModel(
            name='RecommendationFeedback',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('feedback_type', models.CharField(choices=[('positive', 'Positive'), ('negative', 'Negative'), ('neutral', 'Neutral')], max_length=10)),
                ('rating', models.IntegerField(blank=True, null=True)),
                ('comment', models.TextField(blank=True)),
                ('context', models.JSONField(default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('recommendation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='feedback', to='recommendations.recommendation')),
                ('store', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recommendation_feedback', to='stores.store')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recommendation_feedback', to='users.user')),
            ],
            options={
                'db_table': 'recommendation_feedback',
            },
        ),
        migrations.CreateModel(
            name='SimilarProduct',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('similarity_score', models.FloatField()),
                ('similarity_type', models.CharField(max_length=50)),
                ('features_used', models.JSONField(default=list)),
                ('calculated_at', models.DateTimeField(auto_now_add=True)),
                ('source_product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='similar_to', to='products.product')),
                ('store', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='similar_products', to='stores.store')),
                ('target_product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='similar_from', to='products.product')),
            ],
            options={
                'db_table': 'similar_products',
                'ordering': ['-similarity_score'],
            },
        ),
        migrations.CreateModel(
            name='TrendingProduct',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.FloatField()),
                ('velocity', models.FloatField()),
                ('rank', models.IntegerField()),
                ('calculation_window', models.CharField(default='24h', max_length=20)),
                ('calculated_at', models.DateTimeField(auto_now_add=True)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='trending_entries', to='products.product')),
                ('store', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='trending_products', to='stores.store')),
            ],
            options={
                'db_table': 'trending_products',
                'ordering': ['-score'],
            },
        ),
        migrations.CreateModel(
            name='UserRecommendationProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('algorithm_weights', models.JSONField(default=dict)),
                ('total_recommendations_shown', models.IntegerField(default=0)),
                ('total_recommendations_clicked', models.IntegerField(default=0)),
                ('total_recommendations_purchased', models.IntegerField(default=0)),
                ('overall_ctr', models.FloatField(default=0.0)),
                ('overall_conversion_rate', models.FloatField(default=0.0)),
                ('preferred_categories', models.JSONField(default=dict)),
                ('preferred_brands', models.JSONField(default=dict)),
                ('price_sensitivity', models.FloatField(blank=True, null=True)),
                ('novelty_seeking', models.FloatField(default=0.5)),
                ('last_recommendation_at', models.DateTimeField(blank=True, null=True)),
                ('profile_updated_at', models.DateTimeField(auto_now=True)),
                ('store', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_recommendation_profiles', to='stores.store')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recommendation_profile', to='users.user')),
            ],
            options={
                'db_table': 'user_recommendation_profiles',
            },
        ),
        migrations.CreateModel(
            name='ABTestResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('test_name', models.CharField(max_length=255)),
                ('variants', models.JSONField(default=dict)),
                ('traffic_allocation', models.JSONField(default=dict)),
                ('primary_metric', models.CharField(default='click_through_rate', max_length=100)),
                ('results', models.JSONField(default=dict)),
                ('winning_variant', models.CharField(blank=True, max_length=100)),
                ('confidence_level', models.FloatField(blank=True, null=True)),
                ('start_date', models.DateTimeField()),
                ('end_date', models.DateTimeField()),
                ('total_participants', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('store', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ab_test_results', to='stores.store')),
            ],
            options={
                'db_table': 'ab_test_results',
                'indexes': [models.Index(fields=['store', 'start_date'], name='ab_test_res_store_i_84e1ff_idx')],
            },
        ),
        migrations.CreateModel(
            name='MLModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('model_type', models.CharField(choices=[('collaborative_filtering', 'Collaborative Filtering'), ('content_based', 'Content-Based'), ('hybrid', 'Hybrid'), ('session_based', 'Session-Based')], max_length=50)),
                ('version', models.CharField(max_length=50)),
                ('model_file', models.FileField(blank=True, null=True, upload_to='ml_models/')),
                ('model_config', models.JSONField(default=dict)),
                ('accuracy', models.FloatField(blank=True, null=True)),
                ('precision', models.FloatField(blank=True, null=True)),
                ('recall', models.FloatField(blank=True, null=True)),
                ('f1_score', models.FloatField(blank=True, null=True)),
                ('training_loss', models.FloatField(blank=True, null=True)),
                ('training_data_size', models.IntegerField(default=0)),
                ('features_used', models.JSONField(default=list)),
                ('feature_importance', models.JSONField(default=dict)),
                ('status', models.CharField(choices=[('training', 'Training'), ('active', 'Active'), ('inactive', 'Inactive'), ('failed', 'Failed')], default='training', max_length=20)),
                ('is_active', models.BooleanField(default=False)),
                ('description', models.TextField(blank=True)),
                ('trained_at', models.DateTimeField(auto_now=True)),
                ('training_duration', models.FloatField(blank=True, null=True)),
                ('last_used', models.DateTimeField(blank=True, null=True)),
                ('store', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ml_models', to='stores.store')),
            ],
            options={
                'db_table': 'ml_models',
                'ordering': ['-trained_at'],
                'indexes': [models.Index(fields=['store', 'model_type'], name='ml_models_store_i_0836dd_idx'), models.Index(fields=['store', 'is_active'], name='ml_models_store_i_713504_idx'), models.Index(fields=['store', 'status'], name='ml_models_store_i_902453_idx')],
                'unique_together': {('store', 'model_type', 'version')},
            },
        ),
        migrations.AddIndex(
            model_name='recommendation',
            index=models.Index(fields=['store', 'user', 'algorithm'], name='recommendat_store_i_f20314_idx'),
        ),
        migrations.AddIndex(
            model_name='recommendation',
            index=models.Index(fields=['store', 'session_id'], name='recommendat_store_i_cda840_idx'),
        ),
        migrations.AddIndex(
            model_name='recommendation',
            index=models.Index(fields=['store', 'product'], name='recommendat_store_i_712cc4_idx'),
        ),
        migrations.AddIndex(
            model_name='recommendation',
            index=models.Index(fields=['algorithm', 'score'], name='recommendat_algorit_48d196_idx'),
        ),
        migrations.AddIndex(
            model_name='recommendation',
            index=models.Index(fields=['created_at'], name='recommendat_created_02802f_idx'),
        ),
        migrations.AddIndex(
            model_name='recommendation',
            index=models.Index(fields=['expires_at'], name='recommendat_expires_f19a2e_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='recommendation',
            unique_together={('store', 'user', 'session_id', 'product', 'algorithm')},
        ),
        migrations.AlterUniqueTogether(
            name='recommendationconfig',
            unique_together={('store', 'algorithm')},
        ),
        migrations.AddIndex(
            model_name='recommendationfeedback',
            index=models.Index(fields=['store', 'user', 'feedback_type'], name='recommendat_store_i_1a1726_idx'),
        ),
        migrations.AddIndex(
            model_name='recommendationfeedback',
            index=models.Index(fields=['recommendation', 'feedback_type'], name='recommendat_recomme_0289fd_idx'),
        ),
        migrations.AddIndex(
            model_name='similarproduct',
            index=models.Index(fields=['store', 'source_product', 'similarity_score'], name='similar_pro_store_i_72179a_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='similarproduct',
            unique_together={('store', 'source_product', 'target_product')},
        ),
        migrations.AddIndex(
            model_name='trendingproduct',
            index=models.Index(fields=['store', 'calculation_window', 'score'], name='trending_pr_store_i_20b9b5_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='trendingproduct',
            unique_together={('store', 'product', 'calculation_window')},
        ),
        migrations.AlterUniqueTogether(
            name='userrecommendationprofile',
            unique_together={('store', 'user')},
        ),
    ]
